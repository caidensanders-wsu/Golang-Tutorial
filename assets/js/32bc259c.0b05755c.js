"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[6862],{9924:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"data-structures/maps","title":"Maps","description":"Maps are a collection of key-value pairs, similar to dictionaries in other languages such as Python.","source":"@site/docs/04-data-structures/maps.md","sourceDirName":"04-data-structures","slug":"/maps","permalink":"/golang-tutorial/docs/maps","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-data-structures/maps.md","tags":[],"version":"current","frontMatter":{"id":"maps","title":"Maps","slug":"/maps"},"sidebar":"tutorialSidebar","previous":{"title":"Slices","permalink":"/golang-tutorial/docs/slices"},"next":{"title":"Conditionals","permalink":"/golang-tutorial/docs/conditionals"}}');var s=n(4848),t=n(8453);const l={id:"maps",title:"Maps",slug:"/maps"},r="Maps in Go",c={},o=[{value:"Declaring and Initializing Maps",id:"declaring-and-initializing-maps",level:2},{value:"Example (map from make)",id:"example-map-from-make",level:3},{value:"Example (using map literal)",id:"example-using-map-literal",level:3},{value:"Accessing and Modifying Elements",id:"accessing-and-modifying-elements",level:2},{value:"Iterating Over a Map",id:"iterating-over-a-map",level:2},{value:"Example",id:"example",level:3},{value:"Checking Existence",id:"checking-existence",level:2},{value:"Example",id:"example-1",level:3},{value:"Some Properties",id:"some-properties",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"maps-in-go",children:"Maps in Go"})}),"\n",(0,s.jsx)(a.p,{children:"Maps are a collection of key-value pairs, similar to dictionaries in other languages such as Python."}),"\n",(0,s.jsx)(a.h2,{id:"declaring-and-initializing-maps",children:"Declaring and Initializing Maps"}),"\n",(0,s.jsxs)(a.p,{children:["There are two common ways of initializing maps: using ",(0,s.jsx)(a.code,{children:"make"})," like with slices, or using map literals."]}),"\n",(0,s.jsx)(a.h3,{id:"example-map-from-make",children:"Example (map from make)"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:"m := make(map[string]int)\n"})}),"\n",(0,s.jsx)(a.h3,{id:"example-using-map-literal",children:"Example (using map literal)"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:'m := map[string]int{"Caiden": 19, "Otis": 32}\n'})}),"\n",(0,s.jsx)(a.h2,{id:"accessing-and-modifying-elements",children:"Accessing and Modifying Elements"}),"\n",(0,s.jsx)(a.p,{children:"The easiest way to access a value in a map is to just search for the key like such:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:'m := map[string]int{"Caiden": 19}\nfmt.Println(m["Caiden"])\n'})}),"\n",(0,s.jsx)(a.p,{children:"We can use the same way of accessing to modify, as such:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:'m := map[string]int{"Caiden": 19}\nm["Caiden"] = 20\n'})}),"\n",(0,s.jsxs)(a.p,{children:["We can use the ",(0,s.jsx)(a.code,{children:"delete"})," keyword in Go to delete a key-value pair in a map."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:'m := map[string]int{"Caiden": 19}\ndelete(m, "Caiden")\n'})}),"\n",(0,s.jsx)(a.h2,{id:"iterating-over-a-map",children:"Iterating Over a Map"}),"\n",(0,s.jsxs)(a.p,{children:["We can iterate over a map using the ",(0,s.jsx)(a.code,{children:"range"})," keyword."]}),"\n",(0,s.jsx)(a.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:'for key, value := range m {\n\tfmt.Printf("key: %s, value: %d\\n", key, value)\n}\n'})}),"\n",(0,s.jsx)(a.h2,{id:"checking-existence",children:"Checking Existence"}),"\n",(0,s.jsx)(a.p,{children:"It's very important to make sure that a key exists before just trying to access it. Go makes this easy with an existence check build into maps."}),"\n",(0,s.jsx)(a.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-go",children:'m := map[string]int{"Caiden": 19}\nvalue, ok := m["Caiden"]\nif ok {\n\tfmt.Println("Caiden is " + value + " years old.")\n} else {\n\tfmt.Println("Caiden does not exist.")\n}\n'})}),"\n",(0,s.jsx)(a.h2,{id:"some-properties",children:"Some Properties"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Maps are unordered."}),"\n",(0,s.jsx)(a.li,{children:"Keys must be of a comparable type."}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(a.p,{children:"Maps are a collection of key-value pairs. Maps are unordered and they must contain keys that are comparable. They are very similar to the likes of dictionaries in languages such as Python."})]})}function m(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>r});var i=n(6540);const s={},t=i.createContext(s);function l(e){const a=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:a},e.children)}}}]);