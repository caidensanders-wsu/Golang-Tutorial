"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[1031],{5252:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"data-structures/arrays","title":"Arrays","description":"An array is a fixed-size collection of elements. An array has order and all elements must be of the same type.","source":"@site/docs/04-data-structures/arrays.md","sourceDirName":"04-data-structures","slug":"/arrays","permalink":"/golang-tutorial/docs/arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-data-structures/arrays.md","tags":[],"version":"current","frontMatter":{"id":"arrays","title":"Arrays","slug":"/arrays"},"sidebar":"tutorialSidebar","previous":{"title":"Type Strength","permalink":"/golang-tutorial/docs/type-strength"},"next":{"title":"Slices","permalink":"/golang-tutorial/docs/slices"}}');var i=n(4848),l=n(8453);const s={id:"arrays",title:"Arrays",slug:"/arrays"},t="Arrays in Go",o={},d=[{value:"Declaring and Initializing Arrays",id:"declaring-and-initializing-arrays",level:2},{value:"Declaring an Array",id:"declaring-an-array",level:3},{value:"Initializing an Arrray",id:"initializing-an-arrray",level:3},{value:"Accessing and Changing Values",id:"accessing-and-changing-values",level:3},{value:"Iterating Over Arrays",id:"iterating-over-arrays",level:2},{value:"Example (using <code>for</code> loop)",id:"example-using-for-loop",level:3},{value:"Example (using <code>range</code>)",id:"example-using-range",level:3},{value:"Multidimensional Arrays",id:"multidimensional-arrays",level:2},{value:"Example",id:"example",level:3},{value:"Copying",id:"copying",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"arrays-in-go",children:"Arrays in Go"})}),"\n",(0,i.jsx)(a.p,{children:"An array is a fixed-size collection of elements. An array has order and all elements must be of the same type."}),"\n",(0,i.jsx)(a.h2,{id:"declaring-and-initializing-arrays",children:"Declaring and Initializing Arrays"}),"\n",(0,i.jsx)(a.p,{children:"Let's begin by declaring an array of five integers."}),"\n",(0,i.jsx)(a.h3,{id:"declaring-an-array",children:"Declaring an Array"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:"var arr [5]int\n"})}),"\n",(0,i.jsx)(a.p,{children:"That wasn't too bad?"}),"\n",(0,i.jsx)(a.h3,{id:"initializing-an-arrray",children:"Initializing an Arrray"}),"\n",(0,i.jsx)(a.p,{children:"Now this time when we declare the array let's initialize it also."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:"arr := [5]int{10, 20, 30, 40, 50}\n"})}),"\n",(0,i.jsx)(a.h3,{id:"accessing-and-changing-values",children:"Accessing and Changing Values"}),"\n",(0,i.jsx)(a.p,{children:"Now we have an array with five integers in it, let's verify."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:"fmt.Println(arr[0])\n"})}),"\n",(0,i.jsx)(a.p,{children:"You should get an output of 10. Now let's change that element to 25."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:"arr[1] = 25\nfmt.Println(arr[0])\n"})}),"\n",(0,i.jsx)(a.p,{children:"You should get an output of 25."}),"\n",(0,i.jsx)(a.h2,{id:"iterating-over-arrays",children:"Iterating Over Arrays"}),"\n",(0,i.jsx)(a.p,{children:"There are two simple ways to iterative over an array, using for loops, or using range."}),"\n",(0,i.jsxs)(a.h3,{id:"example-using-for-loop",children:["Example (using ",(0,i.jsx)(a.code,{children:"for"})," loop)"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:"for i := 0; i < len(arr); i++ {\n\tfmt.Println(arr[i])\n}\n"})}),"\n",(0,i.jsxs)(a.h3,{id:"example-using-range",children:["Example (using ",(0,i.jsx)(a.code,{children:"range"}),")"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:'for index, value := range arr {\n\tfmt.Printf("index: %d, value: %d\\n, index, value)\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"multidimensional-arrays",children:"Multidimensional Arrays"}),"\n",(0,i.jsx)(a.p,{children:"Multidimensional arrays are supported in Go and can be declared and accessed."}),"\n",(0,i.jsx)(a.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-go",children:"var multidimensional [3][3]int\nmultidimensional[0][0] = 1\nfmt.Println(multidimensional[0][0])\n"})}),"\n",(0,i.jsx)(a.h2,{id:"copying",children:"Copying"}),"\n",(0,i.jsx)(a.p,{children:"Assigning a variable that holds an array to another variable in Go will just create a new array with copies of all elements in the original. Modifying one of the arrays will not change the other."}),"\n",(0,i.jsx)(a.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(a.p,{children:["Arrays are a common data structure in almost all programming languages, and as such, Go has them. However, they are rarely used due to Go having a data structure called ",(0,i.jsx)(a.code,{children:"slice"})," that we will go into in the next section. Sneak peek: Slices have a dynamic size."]})]})}function u(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>t});var r=n(6540);const i={},l=r.createContext(i);function s(e){const a=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(l.Provider,{value:a},e.children)}}}]);