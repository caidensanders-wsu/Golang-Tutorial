"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[1264],{1458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"advanced-types/types","title":"Types","description":"The type keyword in Go allows you to define user-defined types.","source":"@site/docs/07-advanced-types/types.md","sourceDirName":"07-advanced-types","slug":"/types","permalink":"/golang-tutorial/docs/types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07-advanced-types/types.md","tags":[],"version":"current","frontMatter":{"id":"types","title":"Types","slug":"/types"},"sidebar":"tutorialSidebar","previous":{"title":"Functions","permalink":"/golang-tutorial/docs/functions"},"next":{"title":"Structs","permalink":"/golang-tutorial/docs/structs"}}');var a=t(4848),i=t(8453);const r={id:"types",title:"Types",slug:"/types"},l="Types in Go",o={},c=[{value:"Type Aliases",id:"type-aliases",level:2},{value:"Syntax:",id:"syntax",level:3},{value:"Example:",id:"example",level:3},{value:"New Types",id:"new-types",level:2},{value:"Syntax:",id:"syntax-1",level:3},{value:"Example:",id:"example-1",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"types-in-go",children:"Types in Go"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"type"})," keyword in Go allows you to define user-defined types."]}),"\n",(0,a.jsx)(n.h2,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,a.jsx)(n.p,{children:"A type alias lets you create another name for an existing type. Aliases are used for increasing readability or forcing compatibility with an external library that uses another name for a type."}),"\n",(0,a.jsx)(n.h3,{id:"syntax",children:"Syntax:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type AliasName = ExistingType\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype MyString = string\n\nfunc main() {\n\tvar name MyString = "Caiden"\n\tfmt.Println(name)\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In this case, ",(0,a.jsx)(n.code,{children:"MyString"})," is 100% interchangeable with ",(0,a.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"new-types",children:"New Types"}),"\n",(0,a.jsx)(n.p,{children:"A new type creates a type based on another one. Unlike type aliases, this creates a new type with its completely own identity, it just shares the same underlying structure as the original type."}),"\n",(0,a.jsx)(n.h3,{id:"syntax-1",children:"Syntax:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type NewType ExistingType\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nType Celsius float32\nType Fahrenheit float32\n\nfunc main() {\n\tvar temp1 Celsius = 50.0\n\tvar temp2 Fahrenheit = 51.0\n\n\ttemp1 = Celsius(temp2)\n\tfmt.Println(temp1)\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"If you remember, we saw this example back in the section about type strength."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);