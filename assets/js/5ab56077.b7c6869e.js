"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[766],{8319:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"control-structures/loops","title":"Loops","description":"Loops are used to execute a block of code repeatedly. Unlike most languages, Go only has a single looping construct, for, however functionality of other looping constructs can still be achieved.","source":"@site/docs/05-control-structures/loops.md","sourceDirName":"05-control-structures","slug":"/loops","permalink":"/golang-tutorial/docs/loops","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05-control-structures/loops.md","tags":[],"version":"current","frontMatter":{"id":"loops","title":"Loops","slug":"/loops"},"sidebar":"tutorialSidebar","previous":{"title":"Conditionals","permalink":"/golang-tutorial/docs/conditionals"},"next":{"title":"Functions","permalink":"/golang-tutorial/docs/functions"}}');var i=o(4848),l=o(8453);const s={id:"loops",title:"Loops",slug:"/loops"},a="Loops in Go",r={},c=[{value:"For Loops",id:"for-loops",level:2},{value:"Example",id:"example",level:3},{value:"While-loop Functionality",id:"while-loop-functionality",level:2},{value:"Example",id:"example-1",level:3},{value:"Infinite Loop",id:"infinite-loop",level:2},{value:"Example",id:"example-2",level:3},{value:"Range Loop",id:"range-loop",level:2},{value:"Example",id:"example-3",level:3},{value:"Break, Continue Statements",id:"break-continue-statements",level:2},{value:"Example",id:"example-4",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"loops-in-go",children:"Loops in Go"})}),"\n",(0,i.jsxs)(n.p,{children:["Loops are used to execute a block of code repeatedly. Unlike most languages, Go only has a single looping construct, ",(0,i.jsx)(n.code,{children:"for"}),", however functionality of other looping constructs can still be achieved."]}),"\n",(0,i.jsx)(n.h2,{id:"for-loops",children:"For Loops"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"for"})," keyword can be used for traditional for looping, which works as such:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The first statement, ",(0,i.jsx)(n.code,{children:"i := 0"}),", initializes the starting value."]}),"\n",(0,i.jsxs)(n.li,{children:["The second statement, ",(0,i.jsx)(n.code,{children:"i < 10"}),", is the condition and is when the loop stops."]}),"\n",(0,i.jsxs)(n.li,{children:["The third statement, ",(0,i.jsx)(n.code,{children:"i++"}),", is the step and controls what happens after every loop."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(i)\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"while-loop-functionality",children:"While-loop Functionality"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"for"})," loop without an initialization statement and step statement acts like a ",(0,i.jsx)(n.code,{children:"while"})," loop would in most programming languages."]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tx := 0\n\tfor x < 10 {\n\t\tfmt.Println(x)\n\t\tx++\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"infinite-loop",children:"Infinite Loop"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"for"})," loop without any condition will execute forever and is thus an infinite loop."]}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tfor {\n\t\tfmt.Println("infinite loop")\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"range-loop",children:"Range Loop"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"range"})," keyword can be used to iterate over collections such as slices, arrays, or maps."]}),"\n",(0,i.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tname := []int{1, 2, 3, 4, 5}\n\tfor index, value := range nums {\n\t\tfmt.Printf("index: %d, value: %d\\n", index, value)\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"break-continue-statements",children:"Break, Continue Statements"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"break"})," statement allows exit out of a loop prematurely. The ",(0,i.jsx)(n.code,{children:"continue"})," statement allows skipping an iteration of the loop."]}),"\n",(0,i.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\tif i == 0 {\n\t\t\tcontinue\n\t\t} else if i == 5 {\n\t\t\tbreak\n\t\t}\n\n\t\tfmt.Println(i)\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Loops are another type of control structure that allows repeating the execution of code inside of a block for a certain condition. Once the condition is met, the execution will stop."})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(6540);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);