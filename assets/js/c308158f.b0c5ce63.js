"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[7805],{1151:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"primitive-types-and-operations/primitive-types","title":"Primitive Types","description":"In this section, we are going to explore the second concept in a template for learning a new programming language. This topic is primitive types and their operations. Go supports many types, with a strong and statically typed system. This means that in Go, you have to specify the type of each variable, unlike some languages like Python or JavaScript with a dynamic typing system.","source":"@site/docs/02-primitive-types-and-operations/primitive-types.md","sourceDirName":"02-primitive-types-and-operations","slug":"/primitive-types","permalink":"/golang-tutorial/docs/primitive-types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-primitive-types-and-operations/primitive-types.md","tags":[],"version":"current","frontMatter":{"id":"primitive-types","title":"Primitive Types","slug":"/primitive-types"},"sidebar":"tutorialSidebar","previous":{"title":"Variables & Assignments","permalink":"/golang-tutorial/docs/variables-and-assignments"},"next":{"title":"Operations","permalink":"/golang-tutorial/docs/operations"}}');var s=t(4848),r=t(8453);const o={id:"primitive-types",title:"Primitive Types",slug:"/primitive-types"},a="02. Primitive Types and Operations",l={},p=[{value:"1. Primitive Types in Go",id:"1-primitive-types-in-go",level:2},{value:"<code>primitive_types.go</code>",id:"primitive_typesgo",level:3},{value:"Things to keep in mind whilie programming in Go:",id:"things-to-keep-in-mind-whilie-programming-in-go",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"02-primitive-types-and-operations",children:"02. Primitive Types and Operations"})}),"\n",(0,s.jsx)(i.p,{children:"In this section, we are going to explore the second concept in a template for learning a new programming language. This topic is primitive types and their operations. Go supports many types, with a strong and statically typed system. This means that in Go, you have to specify the type of each variable, unlike some languages like Python or JavaScript with a dynamic typing system."}),"\n",(0,s.jsx)(i.h2,{id:"1-primitive-types-in-go",children:"1. Primitive Types in Go"}),"\n",(0,s.jsx)(i.p,{children:"Go supports several basic data types, these are:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Integers: Used to represent whole numbers."}),"\n",(0,s.jsx)(i.li,{children:"Floating-point numbers: Used to represent numbers with decimal points."}),"\n",(0,s.jsxs)(i.li,{children:["Booleans: Used to represent a ",(0,s.jsx)(i.code,{children:"true"})," or ",(0,s.jsx)(i.code,{children:"false"})," value."]}),"\n",(0,s.jsx)(i.li,{children:"Strings: Used to represent a string of characters."}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"primitive_typesgo",children:(0,s.jsx)(i.code,{children:"primitive_types.go"})}),"\n",(0,s.jsx)(i.p,{children:"This file shows you how to declare and access primitive types in Go."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\t// Declare variables.\n\tvar age int = 21\n\tvar gravity float32 = 9.8\n\tvar name string = "Caiden"\n\tvar yummy bool = true\t\n\n\t// Access the variables and print to screen.\n\tfmt.Println("Age:", age)\n\tfmt.Println("Gravity:", gravity)\n\tfmt.Println("Name:", name)\n\tfmt.Println("Yummy:", yummy)\n}\n\n### Output:\n\n```bash\nAge: 21\nGravity: 9.8\nName: Caiden\nYummy: true\n'})}),"\n",(0,s.jsx)(i.h3,{id:"things-to-keep-in-mind-whilie-programming-in-go",children:"Things to keep in mind whilie programming in Go:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Types must be explicitly declared."}),"\n",(0,s.jsxs)(i.li,{children:["Go has two types of numbers, ",(0,s.jsx)(i.code,{children:"int"})," for integers and ",(0,s.jsx)(i.code,{children:"float32"})," or ",(0,s.jsx)(i.code,{children:"float64"})," for floating-point numbers."]}),"\n",(0,s.jsx)(i.li,{children:"Strings are immutable."}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(i.p,{children:"Now that you know the basic, or primitive, data types in Go, you can go on and learn about how to operate on them. See you in the next lesson!"})]})}function d(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>a});var n=t(6540);const s={},r=n.createContext(s);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);