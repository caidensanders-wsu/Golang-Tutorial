"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[1602],{9420:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"primitive-types-and-operations/variables-and-assignments","title":"Variables & Assignments","description":"Variables are used to store data that will be used throughout the runtime of a program. We will go into the exact typing mechanisms of variables in a later chapter, all we need to know for now is that they are statically typed and type has to be known at compile time.","source":"@site/docs/02-primitive-types-and-operations/variables-and-assignments.md","sourceDirName":"02-primitive-types-and-operations","slug":"/variables-and-assignments","permalink":"/golang-tutorial/docs/variables-and-assignments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-primitive-types-and-operations/variables-and-assignments.md","tags":[],"version":"current","frontMatter":{"id":"variables-and-assignments","title":"Variables & Assignments","slug":"/variables-and-assignments"},"sidebar":"tutorialSidebar","previous":{"title":"Input & Output","permalink":"/golang-tutorial/docs/input-output"},"next":{"title":"Primitive Types","permalink":"/golang-tutorial/docs/primitive-types"}}');var l=n(4848),s=n(8453);const t={id:"variables-and-assignments",title:"Variables & Assignments",slug:"/variables-and-assignments"},r="Variables and Assignment in Go",o={},d=[{value:"Declaring Variables",id:"declaring-variables",level:2},{value:"Example (<code>var</code> keyword)",id:"example-var-keyword",level:3},{value:"Example (<code>:=</code> operator)",id:"example--operator",level:3},{value:"Default Values",id:"default-values",level:2},{value:"Multiple Declarations",id:"multiple-declarations",level:2},{value:"Example",id:"example",level:3},{value:"Constants",id:"constants",level:2},{value:"Example",id:"example-1",level:3},{value:"Variable Scope",id:"variable-scope",level:2},{value:"Example",id:"example-2",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.header,{children:(0,l.jsx)(a.h1,{id:"variables-and-assignment-in-go",children:"Variables and Assignment in Go"})}),"\n",(0,l.jsx)(a.p,{children:"Variables are used to store data that will be used throughout the runtime of a program. We will go into the exact typing mechanisms of variables in a later chapter, all we need to know for now is that they are statically typed and type has to be known at compile time."}),"\n",(0,l.jsx)(a.h2,{id:"declaring-variables",children:"Declaring Variables"}),"\n",(0,l.jsx)(a.p,{children:"There are two popular ways to declare variables in Go:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:["Using the ",(0,l.jsx)(a.code,{children:"var"})," keyword."]}),"\n",(0,l.jsxs)(a.li,{children:["Using the ",(0,l.jsx)(a.code,{children:":="})," operator."]}),"\n"]}),"\n",(0,l.jsx)(a.p,{children:"I'll give an example of both."}),"\n",(0,l.jsxs)(a.p,{children:["The ",(0,l.jsx)(a.code,{children:"var"})," keyword explicitly defines a variable. You can add an initial value if you want."]}),"\n",(0,l.jsxs)(a.h3,{id:"example-var-keyword",children:["Example (",(0,l.jsx)(a.code,{children:"var"})," keyword)"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-go",children:'var name string = "Caiden" // Explicit type, initial value\nvar age int                // Explicit type, default value\nvar score = 100            // Type inferred, initial value\n'})}),"\n",(0,l.jsxs)(a.p,{children:["The shorthand ",(0,l.jsx)(a.code,{children:":="})," syntax declares and initializes variables simulaneously. Type is inferred."]}),"\n",(0,l.jsxs)(a.h3,{id:"example--operator",children:["Example (",(0,l.jsx)(a.code,{children:":="})," operator)"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-go",children:'name := "Caiden" // Go can tell from "Caiden" that type is string\nage := 19        // Go can tell from 19 that type is int\n'})}),"\n",(0,l.jsx)(a.h2,{id:"default-values",children:"Default Values"}),"\n",(0,l.jsx)(a.p,{children:"If a variable is declared without an initial value, it gets a default value based on its type:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"int"}),": ",(0,l.jsx)(a.code,{children:"0"})]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"float"}),": ",(0,l.jsx)(a.code,{children:"0.0"})]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"bool"}),": ",(0,l.jsx)(a.code,{children:"false"})]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"string"}),": ",(0,l.jsx)(a.code,{children:'""'})]}),"\n"]}),"\n",(0,l.jsx)(a.h2,{id:"multiple-declarations",children:"Multiple Declarations"}),"\n",(0,l.jsx)(a.p,{children:"Multiple variables can be declared at once in Go."}),"\n",(0,l.jsx)(a.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-go",children:'var x, y int = 1, 2\na, b := "Caiden"\n'})}),"\n",(0,l.jsx)(a.h2,{id:"constants",children:"Constants"}),"\n",(0,l.jsxs)(a.p,{children:["Constants are immutable meaning that they can not be changed after declared with the ",(0,l.jsx)(a.code,{children:"const"})," keyword. They must be initialized at the time that they are declared."]}),"\n",(0,l.jsx)(a.h3,{id:"example-1",children:"Example"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-go",children:'const PI = 3.14159\nconst name = "Caiden"\n'})}),"\n",(0,l.jsx)(a.h2,{id:"variable-scope",children:"Variable Scope"}),"\n",(0,l.jsx)(a.p,{children:"Variables can have two different scopes:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsx)(a.li,{children:"Local Scope: Declared inside a function, cannot be accessed outside of it."}),"\n",(0,l.jsx)(a.li,{children:"Global Scope: Declared outside any function at all, accessible all throughout package."}),"\n"]}),"\n",(0,l.jsx)(a.h3,{id:"example-2",children:"Example"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-go",children:'var global_variable = "I am global" // Global scope\n\nfunc main() {\n\tlocal_variable = "I am local" // Local scope\n\tfmt.Println(global_variable, local_variable)\n}\n'})}),"\n",(0,l.jsx)(a.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,l.jsxs)(a.p,{children:["Variables in Go can be declared using either ",(0,l.jsx)(a.code,{children:"var"})," or ",(0,l.jsx)(a.code,{children:":="}),". If not initialized, they get default values. Constants are immutable, cannot be changed, and are declared with ",(0,l.jsx)(a.code,{children:"const"}),". Be mindful of what scope you define variables in."]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>r});var i=n(6540);const l={},s=i.createContext(l);function t(e){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(s.Provider,{value:a},e.children)}}}]);