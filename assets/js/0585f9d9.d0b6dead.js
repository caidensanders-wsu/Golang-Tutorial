"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[1357],{7434:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Installing Golang","href":"/golang-tutorial/docs/installation","docId":"installation","unlisted":false},{"type":"link","label":"Your First Program in Go","href":"/golang-tutorial/docs/helloworld","docId":"helloworld","unlisted":false},{"type":"category","label":"01 - Input & Output","items":[{"type":"link","label":"Input & Output","href":"/golang-tutorial/docs/input-output","docId":"input-output/input-output","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"02 - Primitive Types & Operations","items":[{"type":"link","label":"Variables & Assignments","href":"/golang-tutorial/docs/variables-and-assignments","docId":"primitive-types-and-operations/variables-and-assignments","unlisted":false},{"type":"link","label":"Primitive Types","href":"/golang-tutorial/docs/primitive-types","docId":"primitive-types-and-operations/primitive-types","unlisted":false},{"type":"link","label":"Operations","href":"/golang-tutorial/docs/operations","docId":"primitive-types-and-operations/operations-on-primitive-types","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"03 - Type System","items":[{"type":"link","label":"Type Checking","href":"/golang-tutorial/docs/type-checking","docId":"type-system/type-checking","unlisted":false},{"type":"link","label":"Type Strength","href":"/golang-tutorial/docs/type-strength","docId":"type-system/type-strength","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"04 - Data Structures","items":[{"type":"link","label":"Arrays","href":"/golang-tutorial/docs/arrays","docId":"data-structures/arrays","unlisted":false},{"type":"link","label":"Slices","href":"/golang-tutorial/docs/slices","docId":"data-structures/slices","unlisted":false},{"type":"link","label":"Maps","href":"/golang-tutorial/docs/maps","docId":"data-structures/maps","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"05 - Control Structures","items":[{"type":"link","label":"Conditionals","href":"/golang-tutorial/docs/conditionals","docId":"control-structures/conditionals","unlisted":false},{"type":"link","label":"Loops","href":"/golang-tutorial/docs/loops","docId":"control-structures/loops","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"06 - Procedural Programming","items":[{"type":"link","label":"Functions","href":"/golang-tutorial/docs/functions","docId":"procedural-programming/functions","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"07 - User-Defined Types","items":[{"type":"link","label":"Types","href":"/golang-tutorial/docs/types","docId":"advanced-types/types","unlisted":false},{"type":"link","label":"Structs","href":"/golang-tutorial/docs/structs","docId":"advanced-types/structs","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"08 - Modularization","items":[{"type":"link","label":"Packages & Modules","href":"/golang-tutorial/docs/packages-modules","docId":"modularization/packages-modules","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"What Next?","href":"/golang-tutorial/docs/what-next","docId":"what-next","unlisted":false}]},"docs":{"advanced-types/structs":{"id":"advanced-types/structs","title":"Structs","description":"In Go, you can create your own data structures by using structs. A struct is a data type that groups together fields, or variables, under a single name for the struct. This allows you to model real-world objects using structs.","sidebar":"tutorialSidebar"},"advanced-types/types":{"id":"advanced-types/types","title":"Types","description":"The type keyword in Go allows you to define user-defined types.","sidebar":"tutorialSidebar"},"control-structures/conditionals":{"id":"control-structures/conditionals","title":"Conditionals","description":"Conditionals are used in Go to structure and execute code based on the results of certain conditions. The main forms of conditionals in Go are if, else if, else, and switch.","sidebar":"tutorialSidebar"},"control-structures/loops":{"id":"control-structures/loops","title":"Loops","description":"Loops are used to execute a block of code repeatedly. Unlike most languages, Go only has a single looping construct, for, however functionality of other looping constructs can still be achieved.","sidebar":"tutorialSidebar"},"data-structures/arrays":{"id":"data-structures/arrays","title":"Arrays","description":"An array is a fixed-size collection of elements. An array has order and all elements must be of the same type.","sidebar":"tutorialSidebar"},"data-structures/maps":{"id":"data-structures/maps","title":"Maps","description":"Maps are a collection of key-value pairs, similar to dictionaries in other languages such as Python.","sidebar":"tutorialSidebar"},"data-structures/slices":{"id":"data-structures/slices","title":"Slices","description":"A slice is a dynamically-sized way to view the elements of an array.","sidebar":"tutorialSidebar"},"helloworld":{"id":"helloworld","title":"Your First Program in Go","description":"Hello, World","sidebar":"tutorialSidebar"},"input-output/input-output":{"id":"input-output/input-output","title":"Input & Output","description":"IO (Input Output) operations are critical for interacting with users or systems, as well as debugging. In Go, the fmt package, part of the standard library, provides functions for basic I/O operations.","sidebar":"tutorialSidebar"},"installation":{"id":"installation","title":"Installing Golang","description":"This guide will walk you through all of the steps necessary to install Go on your computer and to get you to go programming!","sidebar":"tutorialSidebar"},"modularization/packages-modules":{"id":"modularization/packages-modules","title":"Packages & Modules","description":"Modularization is a common practice in programming that involves taking a large chunk of code and organizing it into smaller, reusable parts. In Go, modularization is done through two concepts named packages and modules.","sidebar":"tutorialSidebar"},"primitive-types-and-operations/operations-on-primitive-types":{"id":"primitive-types-and-operations/operations-on-primitive-types","title":"Operations","description":"2. Operations on Primitive Types","sidebar":"tutorialSidebar"},"primitive-types-and-operations/primitive-types":{"id":"primitive-types-and-operations/primitive-types","title":"Primitive Types","description":"In this section, we are going to explore the second concept in a template for learning a new programming language. This topic is primitive types and their operations. Go supports many types, with a strong and statically typed system. This means that in Go, you have to specify the type of each variable, unlike some languages like Python or JavaScript with a dynamic typing system.","sidebar":"tutorialSidebar"},"primitive-types-and-operations/variables-and-assignments":{"id":"primitive-types-and-operations/variables-and-assignments","title":"Variables & Assignments","description":"Variables are used to store data that will be used throughout the runtime of a program. We will go into the exact typing mechanisms of variables in a later chapter, all we need to know for now is that they are statically typed and type has to be known at compile time.","sidebar":"tutorialSidebar"},"procedural-programming/functions":{"id":"procedural-programming/functions","title":"Functions","description":"Functions are a fundamental part of programming languages that allow separation of logic into reusable, modular code blocks. In this section, we\'ll learn how to define and use functions in Go.","sidebar":"tutorialSidebar"},"type-system/type-checking":{"id":"type-system/type-checking","title":"Type Checking","description":"Type checking in programming languages is a way to make sure that the type declaration of variables align with the way they are being used. Go is a statically typed language, similar to the likes of C++ and Java, type checking occurs at compile time.","sidebar":"tutorialSidebar"},"type-system/type-strength":{"id":"type-system/type-strength","title":"Type Strength","description":"Type strength is another name for how strictly a programming language enforces their type rules. Go is largely considered to be a strongly typed language because Go enforces type safety and doesn\'t allow implicit type conversions between two unrelated types.","sidebar":"tutorialSidebar"},"what-next":{"id":"what-next","title":"What Next?","description":"Congratulations! You\'ve covered the template for learning a new programming language for Go! Below are some topics that I think would be important for covering to gain a better understanding of Go.","sidebar":"tutorialSidebar"}}}}')}}]);