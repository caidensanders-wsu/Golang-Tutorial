"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[5095],{1173:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"data-structures/slices","title":"Slices","description":"A slice is a dynamically-sized way to view the elements of an array.","source":"@site/docs/04-data-structures/slices.md","sourceDirName":"04-data-structures","slug":"/slices","permalink":"/golang-tutorial/docs/slices","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-data-structures/slices.md","tags":[],"version":"current","frontMatter":{"id":"slices","title":"Slices","slug":"/slices"},"sidebar":"tutorialSidebar","previous":{"title":"Arrays","permalink":"/golang-tutorial/docs/arrays"},"next":{"title":"Maps","permalink":"/golang-tutorial/docs/maps"}}');var i=n(4848),r=n(8453);const l={id:"slices",title:"Slices",slug:"/slices"},c="Slices in Go",t={},o=[{value:"Creating Slices",id:"creating-slices",level:2},{value:"Example (slice from an array)",id:"example-slice-from-an-array",level:3},{value:"Example (slice from make)",id:"example-slice-from-make",level:3},{value:"Modifying Slices",id:"modifying-slices",level:2},{value:"Example",id:"example",level:3},{value:"Slice Operations",id:"slice-operations",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"slices-in-go",children:"Slices in Go"})}),"\n",(0,i.jsx)(s.p,{children:"A slice is a dynamically-sized way to view the elements of an array."}),"\n",(0,i.jsx)(s.h2,{id:"creating-slices",children:"Creating Slices"}),"\n",(0,i.jsx)(s.p,{children:"There are many ways to create slices. One way is from an array."}),"\n",(0,i.jsx)(s.h3,{id:"example-slice-from-an-array",children:"Example (slice from an array)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:"arr := [5]int{1, 2, 3, 4, 5}\nslice := arr[1:4] // Includes elements at index 1 to 4. \n"})}),"\n",(0,i.jsxs)(s.p,{children:["We can also use a function built into Go called ",(0,i.jsx)(s.code,{children:"make"}),", like so,"]}),"\n",(0,i.jsx)(s.h3,{id:"example-slice-from-make",children:"Example (slice from make)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:"slice := make([]int, 5)\n"})}),"\n",(0,i.jsx)(s.p,{children:"That last example created a slice of 5 integers, all initialized to 0."}),"\n",(0,i.jsx)(s.h2,{id:"modifying-slices",children:"Modifying Slices"}),"\n",(0,i.jsx)(s.p,{children:"Slices are different than arrays when it comes to copying. A slice is a reference to an underlying array. Thus, modifying a slice changes the original array at the same time."}),"\n",(0,i.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:"arr := [5]int{1, 2, 3, 4, 5}\nslice := arr[1:4]\nslice[0] = 100\n"})}),"\n",(0,i.jsx)(s.p,{children:"The above code modified arr[1], as that is where slice starts, and set arr[1] equal to 100."}),"\n",(0,i.jsx)(s.h2,{id:"slice-operations",children:"Slice Operations"}),"\n",(0,i.jsxs)(s.p,{children:["There are many operations for slices in Go, but some common ones are: ",(0,i.jsx)(s.code,{children:"append"}),", ",(0,i.jsx)(s.code,{children:"len"}),", ",(0,i.jsx)(s.code,{children:"cap"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"append"}),": adds another item onto the end of an array"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:"slice := []int{1, 2, 3}\nslice = append(slice, 4, 100)\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"len"}),": returns the number of items in a slice"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:"fmt.Println(len(slice))\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"cap"}),": returns the number of items from the beginning of the slice to the end of the underlying array."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:"fmt.Println(cap(slice))\n"})}),"\n",(0,i.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(s.p,{children:"Slices are a way of viewing arrays that allow a dynamic-size. That is why they are preferred over arrays. Slices are references to the underlying arrays and as such they share the same underlying data."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>c});var a=n(6540);const i={},r=a.createContext(i);function l(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);