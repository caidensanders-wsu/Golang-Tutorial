"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[6031],{5025:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced-types/structs","title":"Structs","description":"In Go, you can create your own data structures by using structs. A struct is a data type that groups together fields, or variables, under a single name for the struct. This allows you to model real-world objects using structs.","source":"@site/docs/07-advanced-types/structs.md","sourceDirName":"07-advanced-types","slug":"/structs","permalink":"/golang-tutorial/docs/structs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07-advanced-types/structs.md","tags":[],"version":"current","frontMatter":{"id":"structs","title":"Structs","slug":"/structs"},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/golang-tutorial/docs/types"},"next":{"title":"Packages & Modules","permalink":"/golang-tutorial/docs/packages-modules"}}');var r=t(4848),a=t(8453);const i={id:"structs",title:"Structs",slug:"/structs"},c="Structs in Go",o={},l=[{value:"Defining a Struct",id:"defining-a-struct",level:2},{value:"Example",id:"example",level:3},{value:"Accessing Structs",id:"accessing-structs",level:2},{value:"Example",id:"example-1",level:3},{value:"Methods on Structs",id:"methods-on-structs",level:2},{value:"Example",id:"example-2",level:3},{value:"Constructors",id:"constructors",level:2},{value:"Example",id:"example-3",level:3},{value:"Copying Structs",id:"copying-structs",level:2},{value:"Example",id:"example-4",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structs-in-go",children:"Structs in Go"})}),"\n",(0,r.jsxs)(n.p,{children:["In Go, you can create your own data structures by using ",(0,r.jsx)(n.strong,{children:"structs"}),". A struct is a data type that groups together fields, or variables, under a single name for the struct. This allows you to model real-world objects using structs."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-a-struct",children:"Defining a Struct"}),"\n",(0,r.jsxs)(n.p,{children:["A struct is defined using the ",(0,r.jsx)(n.code,{children:"type"})," keyword followed by the struct name and its fields."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype Person struct {\n\tName string\n\tAge int\n}\n\nfunc main() {\n\tp := Person(Name: "Caiden", age: 19)\n\tfmt.Println(p)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"accessing-structs",children:"Accessing Structs"}),"\n",(0,r.jsxs)(n.p,{children:["Fields of a struct can be accessed using the dot (",(0,r.jsx)(n.code,{children:"."}),") operator."]}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype Person struct {\n\tName string\n\tAge int\n}\n\nfunc main() {\n\tp := Person(Name: "Caiden", age: 19)\n\n\tfmt.Println("Name:", p.Name)\n\tfmt.Println("Age:", p.Age)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"methods-on-structs",children:"Methods on Structs"}),"\n",(0,r.jsx)(n.p,{children:"Methods can be defined on structs to associate behaviors with the data in the fields."}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype Rectangle struct {\n\tWidth float32\n\tHeight float32\n}\n\nfunc (r Rectangle) Area() float32 {\n\treturn r.Width * r.Height\n}\n\nfunc (r *Rectangle) Resize(newWidth, newHeight float32) {\n\tr.Width = newWidth\n\tr.Height = newHeight\n}\n\nfunc main() {\n\trect := Rectangle(Width: 10, Height: 10)\n\tfmt.Println("Area:", rect.Area())\n\n\trect.Resize(20, 10)\n\tfmt.Println("Updated Area:", rect.Area())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsx)(n.p,{children:"Go does not have constructors in the way that other programming languages do, but factories can be created to initialize structs."}),"\n",(0,r.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype Person struct {\n\tName string\n\tAge int\n}\n\nfunc newPerson(name string, age int) Person {\n\treturn Person(Name: name, Age: age)\n}\n\nfunc main() {\n\tp := NewPerson("Caiden", 19)\n\tfmt.Println(p)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"copying-structs",children:"Copying Structs"}),"\n",(0,r.jsx)(n.p,{children:"When you assign a struct to another variable, only a copy is created. Modifications to one of the variables will not affect the other."}),"\n",(0,r.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype Person struct {\n\tName string\n\tAge int\n}\n\nfunc main() {\n\tp1 := Person(Name: "Caiden", age: 19)\n\tp2 := p1\n\n\tp2.Name = "John"\n\tfmt.Println("p1:", p1)\n\tfmt.Println("p2:", p2)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"As a side note, when using structs as a function parameter, you can pass them by reference using pointers where modifying one will affect the other, like such:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func UpdateName(p *Person, newName string) {\n\tp.Name = newName\n}\n\nfunc main() {\n\tperson := Person(Name: "Caiden", Age: 19)\n\tUpdateName(&person, "John")\n\tfmt.Println(person.Name)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Structs can be used in Go to organize many primitive types into one composite type. This type can often be used to model real-world entities in a way that makes the code more readable and easier to program with methods for behaviors and factorys for initialization."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);