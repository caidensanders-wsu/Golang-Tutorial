"use strict";(self.webpackChunkgolang_tutorial=self.webpackChunkgolang_tutorial||[]).push([[4399],{2212:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"procedural-programming/functions","title":"Functions","description":"Functions are a fundamental part of programming languages that allow separation of logic into reusable, modular code blocks. In this section, we\'ll learn how to define and use functions in Go.","source":"@site/docs/06-procedural-programming/functions.md","sourceDirName":"06-procedural-programming","slug":"/functions","permalink":"/golang-tutorial/docs/functions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06-procedural-programming/functions.md","tags":[],"version":"current","frontMatter":{"id":"functions","title":"Functions","slug":"/functions"},"sidebar":"tutorialSidebar","previous":{"title":"Loops","permalink":"/golang-tutorial/docs/loops"},"next":{"title":"Types","permalink":"/golang-tutorial/docs/types"}}');var a=t(4848),r=t(8453);const l={id:"functions",title:"Functions",slug:"/functions"},s="Functions in Go",o={},u=[{value:"Defining a Function",id:"defining-a-function",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Function Parameters",id:"function-parameters",level:2},{value:"Example",id:"example-1",level:3},{value:"Side Note",id:"side-note",level:3},{value:"Return Values",id:"return-values",level:2},{value:"Example (single return value)",id:"example-single-return-value",level:3},{value:"Example (multiple return values)",id:"example-multiple-return-values",level:3},{value:"Named Return Values",id:"named-return-values",level:2},{value:"Variadic Functions",id:"variadic-functions",level:2},{value:"Example",id:"example-2",level:3},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Example (inline anonymous function)",id:"example-inline-anonymous-function",level:3},{value:"Example (assigning to variable)",id:"example-assigning-to-variable",level:3},{value:"Higher-Order Functions",id:"higher-order-functions",level:2},{value:"Example",id:"example-3",level:3},{value:"Closures",id:"closures",level:2},{value:"Example",id:"example-4",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"functions-in-go",children:"Functions in Go"})}),"\n",(0,a.jsx)(e.p,{children:"Functions are a fundamental part of programming languages that allow separation of logic into reusable, modular code blocks. In this section, we'll learn how to define and use functions in Go."}),"\n",(0,a.jsx)(e.h2,{id:"defining-a-function",children:"Defining a Function"}),"\n",(0,a.jsxs)(e.p,{children:["In Go, a function is defined using the ",(0,a.jsx)(e.code,{children:"func"})," keyword with a function name, parameters, and a return type."]}),"\n",(0,a.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"func function_name(parameters) return_type {\n\t// Code block\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc greet(name string) string {\n\treturn "Hello, " + name + "!"\n}\n\nfunc main() {\n\tmessage := greet("Caiden")\n\tfmt.Println(message)\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"function-parameters",children:"Function Parameters"}),"\n",(0,a.jsx)(e.p,{children:"Go functions can take single, multiple, or no parameters, with each parameter having a type."}),"\n",(0,a.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc add(a int, b int) int {\n\treturn a + b\n}\n\nfunc main() {\n\tresult := add(10, 10)\n\tfmt.Println("10 + 10 =", result)\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"side-note",children:"Side Note"}),"\n",(0,a.jsx)(e.p,{children:"Parameters of the same type can be grouped as such:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"func multiply(a, b int) int {\n\treturn a + b\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"return-values",children:"Return Values"}),"\n",(0,a.jsx)(e.p,{children:"Go functions can return a single value or multiple values."}),"\n",(0,a.jsx)(e.h3,{id:"example-single-return-value",children:"Example (single return value)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc square(x int) int {\n\treturn x * x\n}\n\nfunc main() {\n\tten_squared = square(10)\n\tfmt.Print("10^2 =", ten_squared)\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"example-multiple-return-values",children:"Example (multiple return values)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc divide(dividend, divisor int) (int, int) {\n\tquotient := dividend / divisor\n\tremainder := dividend % divisor\n\treturn quotient, remainder\n}\n\nfunc main() {\n\tq, r := divide(10, 3)\n\tfmt.Println("quotient:", q, "reainder:", r)\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"named-return-values",children:"Named Return Values"}),"\n",(0,a.jsx)(e.p,{children:"Go allows putting a name to a return value, making code cleaner, like such:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"func rectangle(length, width int) (area, perimeter int) {\n\tarea = length * width\n\tperimeter = 2 * (length + width)\n\treturn\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"variadic-functions",children:"Variadic Functions"}),"\n",(0,a.jsxs)(e.p,{children:["A variadic function is a function that takes a special type of parameter that accepts an arbitrary number of arguments. We can use ",(0,a.jsx)(e.code,{children:"..."})," before the parameter type in order to create a variadic function."]}),"\n",(0,a.jsx)(e.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc sum(numbers ...int) int {\n\ttotal := 0\n\tfor _, num := range numbers {\n\t\ttotal += num\n\t}\n\treturn total\n}\n\nfunc main() {\n\tfmt.Println("Sum:", sum(1, 2, 3, 4, 5))\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"anonymous-functions",children:"Anonymous Functions"}),"\n",(0,a.jsx)(e.p,{children:"An anonymous function is a function without a name. Go allows sthe crewation of these and they are often used to declare a function to a variable, or to call it immediately."}),"\n",(0,a.jsx)(e.h3,{id:"example-inline-anonymous-function",children:"Example (inline anonymous function)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tresult := func(a, b int) int {\n\t\treturn a + b\n\t}(5, 7)\n\t\n\tfmt.Println("Result:", result)\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"example-assigning-to-variable",children:"Example (assigning to variable)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tmultiply := func(a, b int) int {\n\t\treturn a + b\n\t}\n\tfmt.Println("10 * 10 =", multiply(10, 10))\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"higher-order-functions",children:"Higher-Order Functions"}),"\n",(0,a.jsx)(e.p,{children:"Functions in Go can take other functions in as parameters to the function or they can return them from the function."}),"\n",(0,a.jsx)(e.h3,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc Map(slice []int, fn func(int) int) []int {\n\tvar result []int\n\tfor _, v := range slice {\n\t\tresult = append(result, fn(v))\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\n\tdouble := func(x int) int {\n\t\treturn x * 2\n\t}\n\n\tdoubledNumbers := Map(numbers, double)\n\tfmt.Println("Original:", numbers)\n\tfmt.Println("Doubled:", doubledNumbers)\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"closures",children:"Closures"}),"\n",(0,a.jsx)(e.p,{children:"Closures are one of the more advanced topics in procedural programming. Functions in Go can create closures that capture variables from their outer scope. Below is an example."}),"\n",(0,a.jsx)(e.h3,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tincrement := func() func() int {\n\t\tcounter := 0\n\t\treturn func() int {\n\t\t\tcounter++\n\t\t\treturn counter\n\t\t}\n\t}()\n\n\tfmt.Println(increment()) // 1\n\tfmt.Println(increment()) // 2\n\tfmt.Println(increment()) // 3\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(e.p,{children:"Functions are a way of organizing code into separate units, or code blocks, and increase reusability as functions can be called multiple times. Functions in Go are treated as first-class citizens, they can be passed as arguments or returned from other functions."})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>s});var i=t(6540);const a={},r=i.createContext(a);function l(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:l(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);